function [vas,t] = getVa()
fs=100;
dt=1/fs;
t=0:dt:6-dt;
Va=0.5*t(1:(2*fs));
Va=[Va,ones(1,2*fs)];
Va=[Va,-0.5*t(4*fs+1:6*fs)+3];


trajSig=[zeros(1,3*fs),ones(1,0.5*fs),zeros(1,2.5*fs)];
N=length(t);
df=fs/N;
fv = (0:N-1)*df; % frequency vector


[Vas,group_delay] = FilterData([Va,zeros(1,0.3*fs)])
t=0:dt:6-dt+0.3;
trajSig=[trajSig,zeros(1,30)];
%fort+group_delay*d



end

function [dataFiltered,group_delay] = FilterData(data)

[n,m]=size(data);

%Forcing row vectros
if n>m
    data=data';
    n=temp;
    n=m;
    m=temp;
end

%Init Filter
Hd=filterF;

%Filtering and scaling all signals one by one
for i=1:n
    
%Applying filter
x=Hd.filter(data(i,:));

%Scaling the filtered signal 
group_delay = floor((length(Hd.Numerator) - 1)/2);
% x = x(group_delay+1:end);

scale_factor = max(data(i,:)) / max(x);
x = x * scale_factor;

%Appending Filtered and scaled signal
dataFiltered(i,:)=x;
end
end


function Hd = filterF
%FILTERF Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.14 and Signal Processing Toolbox 9.2.
% Generated on: 25-Mar-2024 10:36:58

% Equiripple Lowpass filter designed using the FIRPM function.

% All frequency values are in Hz.
Fs = 100;  % Sampling Frequency

Fpass = 5;            % Passband Frequency
Fstop = 15;           % Stopband Frequency
Dpass = 0.057501127785;  % Passband Ripple
Dstop = 0.0001;          % Stopband Attenuation
dens  = 20;              % Density Factor

% Calculate the order from the parameters using FIRPMORD.
[N, Fo, Ao, W] = firpmord([Fpass, Fstop]/(Fs/2), [1 0], [Dpass, Dstop]);


% Calculate the coefficients using the FIRPM function.
b  = firpm(N, Fo, Ao, W, {dens});
Hd = dfilt.dffir(b);

end
